package com.example.charts

import androidx.compose.ui.test.assertIsDisplayed
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.compose.ui.test.onNodeWithText
import androidx.compose.ui.test.performClick
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.example.charts.model.ChartConfig
import com.example.charts.model.PieChartData
import com.example.charts.util.ChartDataMapper
import com.example.charts.util.TransactionData
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import androidx.compose.ui.graphics.Color

@RunWith(AndroidJUnit4::class)
class PieChartTest {

    @get:Rule
    val composeTestRule = createComposeRule()

    @Test
    fun testPieChartDisplayed() {
        val testData = listOf(
            PieChartData(
                label = "–ü—Ä–æ–¥—É–∫—Ç—ã",
                value = 1000.0,
                percentage = 50.0,
                color = Color.Blue,
                icon = "üõí"
            ),
            PieChartData(
                label = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                value = 500.0,
                percentage = 25.0,
                color = Color.Green,
                icon = "üöó"
            ),
            PieChartData(
                label = "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                value = 500.0,
                percentage = 25.0,
                color = Color.Red,
                icon = "üéÆ"
            )
        )

        composeTestRule.setContent {
            PieChart(
                data = testData,
                config = ChartConfig(title = "–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            )
        }

        composeTestRule.onNodeWithText("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º").assertIsDisplayed()
        composeTestRule.onNodeWithText("–ü—Ä–æ–¥—É–∫—Ç—ã").assertIsDisplayed()
        composeTestRule.onNodeWithText("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç").assertIsDisplayed()
        composeTestRule.onNodeWithText("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è").assertIsDisplayed()
    }

    @Test
    fun testPieChartWithEmptyData() {
        composeTestRule.setContent {
            PieChart(data = emptyList())
        }

        // –ì—Ä–∞—Ñ–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
    }

    @Test
    fun testPieChartLegendInteraction() {
        val testData = listOf(
            PieChartData(
                label = "–ü—Ä–æ–¥—É–∫—Ç—ã",
                value = 1000.0,
                percentage = 100.0,
                color = Color.Blue,
                icon = "üõí"
            )
        )

        composeTestRule.setContent {
            PieChart(
                data = testData,
                onSegmentClick = { /* callback */ }
            )
        }

        composeTestRule.onNodeWithText("–ü—Ä–æ–¥—É–∫—Ç—ã").performClick()
    }

    @Test
    fun testChartDataMapper() {
        val transactions = listOf(
            TransactionData("–ü—Ä–æ–¥—É–∫—Ç—ã", "1000", "üõí"),
            TransactionData("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "500", "üöó"),
            TransactionData("–ü—Ä–æ–¥—É–∫—Ç—ã", "500", "üõí") // –î—É–±–ª–∏—Ä—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        )

        val pieChartData = ChartDataMapper.mapToPieChartData(transactions)

        assert(pieChartData.size == 2) // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        assert(pieChartData.first().label == "–ü—Ä–æ–¥—É–∫—Ç—ã") // –ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏ (–±–æ–ª—å—à–∞—è —Å—É–º–º–∞)
        assert(pieChartData.first().value == 1500.0) // –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞
    }
} 